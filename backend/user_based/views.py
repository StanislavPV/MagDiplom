from django.shortcuts import render
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework import status
from books.models import Book
from books.serializers import BookCatalogSerializer
from ratings.models import Rating
from orders.models import OrderItem
from django.db.models import Avg
import joblib
import numpy as np
import pandas as pd
from django.db.models import Q
import os
import sys
from django.conf import settings
from .models import SVDRecommender

import __main__
__main__.SVDRecommender = SVDRecommender

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
_cached_model = None

def load_user_based_model():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –Ω–∞–≤—á–µ–Ω—É user-based –º–æ–¥–µ–ª—å –∑ —Ñ–∞–π–ª—É"""
    global _cached_model
    if _cached_model is None:
        model_path = os.path.join(os.path.dirname(__file__), 'svd_recommender_clean.pkl')
        try:
            print(f"üîç Loading model from: {model_path}")
            _cached_model = joblib.load(model_path)
            print("‚úÖ User-based model loaded successfully!")
        except Exception as e:
            print(f"‚ùå Error loading user-based model: {e}")
            return None
    return _cached_model

def create_current_user_item_matrix():
    """
    –°—Ç–≤–æ—Ä—é—î –ø–æ—Ç–æ—á–Ω—É user-item –º–∞—Ç—Ä–∏—Ü—é –∑ Django –¥–∞–Ω–∏—Ö
    """
    print("üìä Creating current user-item matrix for user-based...")
    
    # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —Ä–µ–π—Ç–∏–Ω–≥–∏ —Ç–∞ –ø–æ–∫—É–ø–∫–∏
    all_ratings_data = []
    
    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
    for rating in Rating.objects.select_related('user', 'book').all():
        all_ratings_data.append({
            'user_id': rating.user.id,
            'book_id': rating.book.id,
            'rating': rating.score,
            'is_implicit': False
        })
    
    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ –ø–æ–∫—É–ø–∫–∞–º–∏ (–±–µ–∑ —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤)
    rated_user_book_pairs = {(r['user_id'], r['book_id']) for r in all_ratings_data}
    
    for item in OrderItem.objects.filter(order__is_completed=True).select_related('order__user', 'book'):
        user_book_pair = (item.order.user.id, item.book.id)
        
        if user_book_pair not in rated_user_book_pairs:
            all_ratings_data.append({
                'user_id': item.order.user.id,
                'book_id': item.book.id,
                'rating': 4,  # –ù–µ—è–≤–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –ø–æ–∫—É–ø–æ–∫
                'is_implicit': True
            })
    
    if not all_ratings_data:
        return None, {}, {}
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ mappings
    unique_users = list(set(d['user_id'] for d in all_ratings_data))
    unique_books = list(set(d['book_id'] for d in all_ratings_data))
    
    user_to_idx = {user: idx for idx, user in enumerate(unique_users)}
    book_to_idx = {book: idx for idx, book in enumerate(unique_books)}
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞—Ç—Ä–∏—Ü—é
    matrix = np.zeros((len(unique_users), len(unique_books)))
    
    for data in all_ratings_data:
        user_idx = user_to_idx[data['user_id']]
        book_idx = book_to_idx[data['book_id']]
        matrix[user_idx, book_idx] = data['rating']
    
    print(f"üìà User-based matrix created: {len(unique_users)} users x {len(unique_books)} books")
    
    return matrix, user_to_idx, book_to_idx

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_user_based_recommendations(request):
    """
    –ì–µ–Ω–µ—Ä—É—î user-based collaborative filtering —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    """
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–æ–¥–µ–ª—å
        model_data = load_user_based_model()
        if model_data is None:
            return Response({
                'error': 'User-based model not found',
                'recommendations': [],
                'type': 'error'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
        recommender = model_data['recommender']
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ç–æ—á–Ω—É –º–∞—Ç—Ä–∏—Ü—é –∑ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        current_matrix, user_to_idx, book_to_idx = create_current_user_item_matrix()
        
        if current_matrix is None:
            return Response({
                'recommendations': [],
                'type': 'no_data',
                'message': 'No data available for user-based recommendations'
            })
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Å–∏—Å—Ç–µ–º—ñ
        if request.user.id not in user_to_idx:
            # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–æ–≤–∏–π - –Ω–µ–º–∞—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
            return Response({
                'recommendations': [],
                'type': 'new_user',
                'message': '–ü–æ—Å—Ç–∞–≤—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –∞–±–æ –∑—Ä–æ–±—ñ—Ç—å –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π'
            })
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        user_idx = user_to_idx[request.user.id]
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–µ–æ—Ü—ñ–Ω–µ–Ω—ñ –∫–Ω–∏–≥–∏
        user_ratings = current_matrix[user_idx]
        unrated_book_indices = np.where(user_ratings == 0)[0]
        
        if len(unrated_book_indices) == 0:
            return Response({
                'recommendations': [],
                'type': 'no_new_books',
                'message': '–í–∏ –æ—Ü—ñ–Ω–∏–ª–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–Ω–∏–≥–∏! –î–æ–¥–∞–π—Ç–µ –Ω–æ–≤—ñ –∫–Ω–∏–≥–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π'
            })
        
        # –ü–µ—Ä–µ–¥–±–∞—á–∞—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è –Ω–µ–æ—Ü—ñ–Ω–µ–Ω–∏—Ö –∫–Ω–∏–≥
        predictions = []
        idx_to_book = {idx: book_id for book_id, idx in book_to_idx.items()}
        
        for book_idx in unrated_book_indices:
            try:
                predicted_rating = recommender.predict(user_idx, book_idx)
                book_id = idx_to_book[book_idx]
                
                predictions.append({
                    'book_id': book_id,
                    'predicted_rating': predicted_rating
                })
            except Exception as e:
                print(f"Error predicting for book {book_idx}: {e}")
                continue
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
        predictions.sort(key=lambda x: x['predicted_rating'], reverse=True)

        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø-8 —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏—Ö –∫–Ω–∏–≥
        top_predictions = predictions[:8]
        recommended_book_ids = [p['book_id'] for p in top_predictions]
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–Ω–∏–≥–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        books = Book.objects.filter(id__in=recommended_book_ids, is_available=True)
        books_dict = {book.id: book for book in books}
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ä—è–¥–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
        ordered_books = []
        for pred in top_predictions:
            if pred['book_id'] in books_dict:
                book = books_dict[pred['book_id']]
                book.predicted_rating = round(pred['predicted_rating'], 2)
                ordered_books.append(book)
        
        # –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–Ω–∏–≥ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        if not ordered_books:
            return Response({
                'recommendations': [],
                'type': 'no_available_books',
                'message': '–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –∫–Ω–∏–≥–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ'
            })
        
        # –°–µ—Ä—ñ–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        serializer = BookCatalogSerializer(ordered_books, many=True, context={'request': request})
        
        # –î–æ–¥–∞—î–º–æ predicted_rating –¥–æ –∫–æ–∂–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        results = serializer.data
        for i, book_data in enumerate(results):
            if i < len(ordered_books):
                book_data['predicted_rating'] = ordered_books[i].predicted_rating
        
        return Response({
            'recommendations': results,
            'type': 'user_based_collaborative',
            'total_recommendations': len(results),
            'user_activities': len(np.where(user_ratings > 0)[0]),
            'message': f'–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ {len(np.where(user_ratings > 0)[0])} –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π'
        })
        
    except Exception as e:
        print(f"‚ùå Error in user-based recommendations: {str(e)}")
        return Response({
            'error': str(e),
            'recommendations': [],
            'type': 'error'
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_user_based_stats(request):
    """
    –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è user-based —Å–∏—Å—Ç–µ–º–∏
    """
    try:
        user = request.user
        
        # –†–µ–π—Ç–∏–Ω–≥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        ratings_count = Rating.objects.filter(user=user).count()
        avg_rating = Rating.objects.filter(user=user).aggregate(
            avg=Avg('score')
        )['avg']
        
        # –ü–æ–∫—É–ø–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        purchases_count = OrderItem.objects.filter(
            order__user=user,
            order__is_completed=True
        ).count()
        
        # –ü–æ–∫—É–ø–∫–∏ –±–µ–∑ —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤
        rated_books = Rating.objects.filter(user=user).values_list('book_id', flat=True)
        purchases_without_rating = OrderItem.objects.filter(
            order__user=user,
            order__is_completed=True
        ).exclude(book_id__in=rated_books).count()
        
        return Response({
            'ratings_count': ratings_count,
            'average_rating': round(avg_rating, 2) if avg_rating else 0,
            'purchases_count': purchases_count,
            'purchases_without_rating': purchases_without_rating,
            'implicit_ratings': purchases_without_rating,
            'total_activity': ratings_count + purchases_without_rating,
            'recommendation_type': 'user_based_collaborative'
        })
        
    except Exception as e:
        return Response({
            'error': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def refresh_user_based_recommendations(request):
    """
    –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–ª—é—î user-based —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ —Ä–µ–π—Ç–∏–Ω–≥—É/–ø–æ–∫—É–ø–∫–∏
    """
    try:
        global _cached_model
        
        return Response({
            'message': 'User-based recommendations will be refreshed on next request',
            'status': 'success'
        })
        
    except Exception as e:
        return Response({
            'error': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@api_view(['GET'])
def get_user_based_model_info(request):
    """
    –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ user-based –º–æ–¥–µ–ª—å
    """
    try:
        model_data = load_user_based_model()
        if model_data is None:
            return Response({
                'error': 'User-based model not available'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
        recommender = model_data['recommender']
        
        return Response({
            'model_type': 'SVD User-Based Collaborative Filtering',
            'n_components': recommender.n_components,
            'is_fitted': recommender.is_fitted,
            'explained_variance': round(recommender.svd.explained_variance_ratio_.sum(), 4) if hasattr(recommender.svd, 'explained_variance_ratio_') else 'Unknown',
            'algorithm': 'Truncated SVD',
            'implicit_rating_value': 4,
            'rating_scale': '1-5'
        })
        
    except Exception as e:
        return Response({
            'error': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)