import os
import pickle
import numpy as np
from django.core.management.base import BaseCommand
from django.conf import settings
from books.models import Book
from recommender.models import BookVector
from deep_translator import GoogleTranslator
import time


class Command(BaseCommand):
    help = '–í–µ–∫—Ç–æ—Ä–∏–∑—É—î –≤—Å—ñ –∫–Ω–∏–≥–∏ –∑ –ø–µ—Ä–µ–∫–ª–∞–¥–æ–º –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É'

    def translate_text(self, text, src='uk', dest='en'):
        """–ë–µ–∑–ø–µ—á–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ —Ç–µ–∫—Å—Ç—É"""
        if not text or text.strip() == '':
            return ''
        
        try:
            translator = GoogleTranslator(source=src, target=dest)
            result = translator.translate(text)
            return result if result else text
        except Exception as e:
            self.stdout.write(f"   ‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É: {e}")
            return text

    def handle(self, *args, **options):
        self.stdout.write("üöÄ –ü–æ—á–∞—Ç–æ–∫ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∫–Ω–∏–≥...")
        
        # 1. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–≤—á–µ–Ω—É TF-IDF –º–æ–¥–µ–ª—å
        vectorizer_path = os.path.join(settings.BASE_DIR, 'recommender', 'tfidf_vectorizer.pkl')
        
        if not os.path.exists(vectorizer_path):
            self.stdout.write(f"‚ùå –§–∞–π–ª –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {vectorizer_path}")
            return
        
        try:
            with open(vectorizer_path, 'rb') as f:
                vectorizer = pickle.load(f)
            self.stdout.write("‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
        except Exception as e:
            self.stdout.write(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞: {e}")
            return
        
        # 2. –¢–µ—Å—Ç—É—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á
        try:
            test_result = self.translate_text('—Ç–µ—Å—Ç')
            self.stdout.write(f"‚úÖ –ü–µ—Ä–µ–∫–ª–∞–¥–∞—á –ø—Ä–∞—Ü—é—î! –¢–µ—Å—Ç: '—Ç–µ—Å—Ç' -> '{test_result}'")
        except Exception as e:
            self.stdout.write(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞: {e}")
            return
        
        # 3. –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫–Ω–∏–≥–∏ –∑ –ë–î
        books = Book.objects.prefetch_related('author', 'genres').all()
        total_books = books.count()
        self.stdout.write(f"üìö –ó–Ω–∞–π–¥–µ–Ω–æ {total_books} –∫–Ω–∏–≥ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó")
        
        if total_books == 0:
            self.stdout.write("‚ùå –ù–µ–º–∞—î –∫–Ω–∏–≥ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö!")
            return
        
        # 4. –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–Ω—É –∫–Ω–∏–≥—É
        processed = 0
        errors = 0
        
        for i, book in enumerate(books, 1):
            try:
                self.stdout.write(f"\nüìñ [{i}/{total_books}] –û–±—Ä–æ–±–ª—è—î–º–æ: {book.title}")
                
                # –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
                authors_uk = ', '.join([a.name for a in book.author.all()])
                genres_uk = ', '.join([g.name for g in book.genres.all()])
                description_uk = book.description or ''
                
                self.stdout.write(f"   –ê–≤—Ç–æ—Ä–∏ (UA): {authors_uk}")
                self.stdout.write(f"   –ñ–∞–Ω—Ä–∏ (UA): {genres_uk}")
                self.stdout.write(f"   –û–ø–∏—Å (UA): {description_uk[:100]}... (–ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç)")
                
                # –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É - –ü–û–í–ù–ò–ô –û–ü–ò–°!
                authors_en = self.translate_text(authors_uk)
                time.sleep(0.1)
                
                genres_en = self.translate_text(genres_uk)
                time.sleep(0.1)
                
                # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ –ü–û–í–ù–ò–ô –æ–ø–∏—Å
                description_en = self.translate_text(description_uk) if description_uk else ''
                time.sleep(0.2)  # –¢—Ä–æ—Ö–∏ –±—ñ–ª—å—à–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –¥–æ–≤–≥–æ–≥–æ —Ç–µ–∫—Å—Ç—É
                
                self.stdout.write(f"   –ê–≤—Ç–æ—Ä–∏ (EN): {authors_en}")
                self.stdout.write(f"   –ñ–∞–Ω—Ä–∏ (EN): {genres_en}")
                self.stdout.write(f"   –û–ø–∏—Å (EN): {description_en[:100]}... (–ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–æ)")
                
                # –§–æ—Ä–º—É—î–º–æ –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
                combined_text = f"{authors_en} {genres_en} {description_en}".strip()
                
                if not combined_text:
                    self.stdout.write(f"   ‚ùå –ü–æ—Ä–æ–∂–Ω—ñ–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó")
                    continue
                
                # –í–µ–∫—Ç–æ—Ä–∏–∑—É—î–º–æ
                vector = vectorizer.transform([combined_text])
                vector_array = vector.toarray()[0]
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
                book_vector, created = BookVector.objects.get_or_create(book=book)
                book_vector.vector = pickle.dumps(vector_array)
                book_vector.save()
                
                processed += 1
                
                if created:
                    self.stdout.write(f"   ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –≤–µ–∫—Ç–æ—Ä")
                else:
                    self.stdout.write(f"   üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏–π –≤–µ–∫—Ç–æ—Ä")
                
            except Exception as e:
                errors += 1
                self.stdout.write(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
                continue
        
        # 5. –ü—ñ–¥—Å—É–º–æ–∫
        self.stdout.write(f"\nüéâ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        self.stdout.write(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {processed}")
        self.stdout.write(f"‚ùå –ü–æ–º–∏–ª–æ–∫: {errors}")
        self.stdout.write(f"üìä –í—Å—å–æ–≥–æ –≤ –ë–î –≤–µ–∫—Ç–æ—Ä—ñ–≤: {BookVector.objects.count()}")